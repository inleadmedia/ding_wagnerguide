<?php

/**
 * Implementation of hook_init().
 */
function ding_wagnerguide_init() {
  drupal_add_js(drupal_get_path('module', 'ding_wagnerguide') . '/ding_wagnerguide.js', 'module', 'footer', TRUE);
  drupal_add_css(drupal_get_path('module', 'ding_wagnerguide') .'/ding_wagnerguide.css');
  drupal_add_js(array(
	                    'ding_wagnerguide' => array(
                                                  'modulePath' => drupal_get_path('module', 'ding_wagnerguide'),
	                                               ), 
											), 'setting');
}

/**
 * Implementation of hook_perm().
 *
 * @return array
 */
function ding_wagnerguide_perm() {
  return array('administer ding_wagnerguide');
}

/**
 * @return array
 */
function ding_wagnerguide_admin() {
  $link_base = '{
    "Vej":"http://web.wagnerguide.com/vejleLibrary.aspx",
    "Bor":"http://web.wagnerguide.com/BorkopLibrary.aspx",
    "Egt":"http://web.wagnerguide.com/EgtvedLibrary.aspx",
    "Giv":"http://web.wagnerguide.com/GiveLibrary.aspx",
    "Jel":"http://web.wagnerguide.com/JellingLibrary.aspx"
  }';

  $transformation_array = '{
    "department_id":{},
    "location_id":{
      "bus":{},
      "dagpleje":{},
      "depot":{
        "popup,Some text or HTML to popup"
      },
      "kontor":{},
      "magasin":{
        "popup,Some text or HTML to popup"
      },
      "magasin1":{},
      "magasin2":{},
      "magasin3":{}
    },
    "sublocation_id":{}
  }';

  $form = array();

  $form['ding_wagnerguide_linkbase'] = array(
    '#type' => 'textarea',
    '#title' => t('Base URL for branches'),
    '#default_value' => variable_get('ding_wagnerguide_linkbase', $link_base),
    '#rows' => 7,
    '#description' => t("
      Contains an array in <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/JSON\">JSON</a> format.<br /><br />
      Make one entry pr. branch, and provide the WagnerGUIDE base URL for each.<br /><br />
      The key (first part) must be the Alma representation 'branch_id', typically three letters.
    "),
    '#required' => TRUE,
  );

  // Make a transformation array text area per branch.
  $branches = json_decode(variable_get('ding_wagnerguide_linkbase', $link_base), TRUE);
  foreach ($branches as $branch => $link) {
    $field = 'ding_wagnerguide_transformation_array_' . $branch;
    $form[$field] = array(
      '#type' => 'textarea',
      '#title' => t('Translation array for branch "' . $branch . '"'),
      '#default_value' => variable_get($field, $transformation_array),
      '#rows' => 15,
      '#description' => t("
        This array in <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/JSON\">JSON</a> format may contain entries for tranformation of all, some or none of the Alma representaions 'department_id, 'location_id' and 'sublocation_id'.<br /><br />
        No link, use:<br />
        <pre>\"location_id\":{\n\t\"depot\":{}\n}</pre><br />
        Rewriting label, use:<br />
        <pre>\"location_id\":{\n\t\"depot\":{\n\"new_label\":\"magasin\"\n}\n}</pre><br />
        For popup, use:<br />
        <pre>\"location_id\":{\n\t\"depot\":{\n\"popup\":\"Popup text\"\n}\n}</pre>
        Ignore rule for certain material types, use:<br />
        <pre>\"location_id\":{\n\t\"depot\":{\n\"ignore_mtype\":\"cd,book\",\n\"popup\":\"Popup text\"\n}\n}</pre>
        
      "),
      '#required' => TRUE,
    );
  }

  $form['ding_wagnerguide_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug mode'),
    '#default_value' => variable_get('ding_wagnerguide_debug', FALSE),
    '#description' => t("
      If set to true, will print HTML comment after WagnerGUIDE link (or where link should have been printed) with the content of 'holding' from Alma.<br /><br />
      Beware that it is printed by javascript, so it cannot be seen in the page source. Use the likes of Firebug or \"View selection source\" et al.<br /><br />
      Can be used to figure out what to put in the above fields.
    "),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * @param type $form
 * @param type $form_state
 */
function ding_wagnerguide_admin_validate($form, &$form_state) {
  $link_base = $form_state['values']['ding_wagnerguide_linkbase'];
  if (!is_array(json_decode($link_base, TRUE))) {
    form_set_error('ding_wagnerguide_linkbase', t('Malformed JSON: Does not transform to array.'));
  }
  else {
    $branches = json_decode($link_base);
    foreach ($branches as $branch => $link) {
      $field = 'ding_wagnerguide_transformation_array_' . $branch;
      $transformation_array = $form_state['values'][$field];
      if (!is_array(json_decode($transformation_array, TRUE))) {
        form_set_error($field, t('Malformed JSON: Does not transform to array.'));
      }
    }
  }
}

/**
 * Implementation of hook_menu().
 *
 * @return array
 */
function ding_wagnerguide_menu() {

  $items = array();

  $items['admin/settings/ding/wagnerguide'] = array(
    'title' => t('WagnerGUIDE module settings'),
    'description' => t(''),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_wagnerguide_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['ding/wagnerguide/item/%'] = array(
    'title' => 'Ding WagnerGUIDE links',
    'description' => 'Returns a list of links to WagnerGUIDE',
    'page callback' => 'ding_wagnerguide_get_wagner_links',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implementation of hook_trampoline().
 *
 * @todo This function is not being used.
 * @see https://github.com/inleadmedia/ding_wagnerguide/blob/master/ding_wagnerguide.js#L26
 *
 * @return array
 */
function ding_wagnerguide_trampoline() {
  $items = array();
  $items['ding/wagnerguide/item/%'] = array();
  return $items;
}

/**
 * Called via AJAX/JavaScript.
 * Returns (prints) JSON containing an array of holdings.
 *
 * @param int $ting_item
 * @return null
 */
function ding_wagnerguide_get_wagner_links($ting_item) {
  $details = alma_client_invoke('catalogue_record_detail', $ting_item);

  $result = array();
  if ($details && isset($details['records'])) {
    foreach ($details['records'] as $alma_id => $record) {
      $result[$alma_id] = array();
      $mtype = $record['media_class'];
      foreach ($record['holdings'] as $alma_holding) {
        // "alma_availability_details()" only return holdings which are not loaned out. So do we:
        if ($alma_holding['total_count'] > $alma_holding['checked_out_count']) {
          $result[$alma_id][] = ding_wagnerguide_get_holding($alma_holding, $mtype);
        }
      }
    }
  }
  drupal_set_header('Content-Type: application/json; charset=utf-8');
  echo json_encode($result);
  return;
}

/**
 * Sub function of ding_wagnerguide_get_wagner_links.
 * Return one holding i.e. one WagnerGUIDE link or popup data.
 *
 * @param array $alma_holding, holding data on all physical instances of the item/record
 * @param string $mtype, material type of the item/record
 * @return mixed null, array or string
 */
function ding_wagnerguide_get_holding($alma_holding, $mtype) {
  // Alma parts => Wagner parts.
  $alma_holding_parts = array(
    'department_id' => 'Department',
    'location_id' => 'Location',
    'sublocation_id' => 'Sublocation',
    'shelf_mark' => 'Shelf'
  );
  $trans = array(
    '~ae' => 'æ',
    '~oe' => 'ø',
    '~aa' => 'å',
  );

  $query_string_parts_base = array('Lang=da', 'menu=false');
  $link_base = json_decode(variable_get('ding_wagnerguide_linkbase', ''), TRUE);

  $query_string_parts = array();
  $holding = array('href' => '');

  // Firstly check if we know the branch.
  if (isset($alma_holding['branch_id']) && isset($link_base[$alma_holding['branch_id']])) {
    // Get the tranformations for that branch.
    $transformation_array = json_decode(variable_get('ding_wagnerguide_transformation_array_' . $alma_holding['branch_id'], ''), TRUE);

    foreach ($alma_holding_parts as $alma_holding_part => $wagner_link_part) {
      if (!empty($alma_holding[$alma_holding_part])) {

        if ($alma_holding_part == 'shelf_mark') {
          /* Shelf_mark is a special case: Use only first letter.
					 * Two primary cases exist: Fiction literature and subject literature
					 * Fiction is identified by the string starting with letters, possibly with a leading ">"-sign (this symbol must be filtered out).
					 * Subject literature has shelf_mark starting with a DK5-no, possibly followed by a label. We need only the number.
					 * The regex below matches one and only one of the above 2 cases
					 */
					if (preg_match("/[a-zA-ZæøåÆØÅ]|^[0-9]+\.?[0-9]+/u", $alma_holding['shelf_mark'], $match)) {
            $query_string_parts[] = $wagner_link_part . '=' . drupal_strtoupper($match[0]);
          }
        }
        else {
          // All others are translated using the transformation array.
          $wagner_link_part_array = $transformation_array[$alma_holding_part][$alma_holding[$alma_holding_part]];
          
          // only transform if transformation array contains something. If material type should be ignored, just continue as if transformation array was empty 
          if (isset($wagner_link_part_array) && (strpos($wagner_link_part_array['ignore_mtype'], $mtype) === false)) {
            
            // If a new_label value exists in the transformation array, transform. 
            $wagner_link_part_value = $wagner_link_part_array['new_label'];
            
            if (!$wagner_link_part_array) {    
              // If a value is set to false in $transformation_array, no link will be given.
              $query_string_parts = array();
              break;
            }
            elseif (isset($wagner_link_part_array['popup'])) {
              // If $transformation_array entry contains a popup value, a popup link will be given. The popup value is the text in the popup.
              $query_string_parts = array();
              $holding['popup'] = $wagner_link_part_array['popup'];
              break;
            }
            
          }
          else {
            // Or just pass the value if no entry in the transformation array, but replace æøå.
            $wagner_link_part_value = strtr($alma_holding[$alma_holding_part], $trans);
          }
          $query_string_parts[] = $wagner_link_part . '=' . $wagner_link_part_value;   //EA change to correct value from link part array
        }
      }
    }
  }

  if ($query_string_parts) {
    $query_string = join('&', array_merge($query_string_parts_base, $query_string_parts));
    $holding['href'] = $link_base[$alma_holding['branch_id']] . '?' . $query_string;
  }

  if (variable_get('ding_wagnerguide_debug', FALSE)) {
    $holding['debug'] = print_r($alma_holding, TRUE);
  }

  return $holding;
}