<?php

/**
 * Implements hook_perm
 * @return array
 */
function ding_wagnerguide_perm() {
  return array('administer ding_wagnerguide');
}

/**
 *
 * @return array
 */
function ding_wagnerguide_admin() {
  $link_base = '{
  "Vej":"http://web.wagnerguide.com/vejleLibrary.aspx",
  "Bor":"http://web.wagnerguide.com/BorkopLibrary.aspx",
  "Egt":"http://web.wagnerguide.com/EgtvedLibrary.aspx",
  "Giv":"http://web.wagnerguide.com/GiveLibrary.aspx",
  "Jel":"http://web.wagnerguide.com/JellingLibrary.aspx"
}';

  $transformation_array = '{
  "department_id":{
  },
  "location_id":{
    "bus":"",
    "dagpleje":"",
    "depot":"popup,Some text or HTML to popup",
    "kontor":"",
    "magasin":"",
    "magasin1":"",
    "magasin2":"",
    "magasin3":""
  },
  "sublocation_id":{
  }
}';

  $form = array();

  $form['ding_wagnerguide_linkbase'] = array(
    '#type' => 'textarea',
    '#title' => t('Base URL for branches'),
    '#default_value' => variable_get('ding_wagnerguide_linkbase', $link_base),
    '#rows' => 7,
    '#description' => t("
      Contains an array in <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/JSON\">JSON</a> format.<br><br>
      Make one entry pr. branch, and provide the Wagnerguide base URL for each.<br><br>
      The key (first part) must be the Alma representation 'branch_id', typically three letters.
    "),
    '#required' => TRUE,
  );

  // make a transformation array text area pr. branch
  $branches = json_decode(variable_get('ding_wagnerguide_linkbase', $link_base), true);
  foreach ($branches as $branch => $link) {
    $field = 'ding_wagnerguide_transformation_array_' . $branch;
    $form[$field] = array(
      '#type' => 'textarea',
      '#title' => t('Translation array for branch "' . $branch . '"'),
      '#default_value' => variable_get($field, $transformation_array),
      '#rows' => 15,
      '#description' => t("
        This array in <a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/JSON\">JSON</a> format may contain entries for tranformation of all, some or none of the Alma representaions 'department_id, 'location_id' and 'sublocation_id'.<br><br>
        If you want to disable the showing of a link i.e. location_id=depot, put \"depot\":\"\" under \"location_id\" like this:<br><br>
        <pre>\"location_id\":{\n\t\"depot\":\"\"\n}</pre><br><br>
        If you want a popup instead of a link, do like this (it must be in one line):<br><br>
        <pre>\"location_id\":{\n\t\"depot\":\"popup,This text &lt;b&gt;is shown&lt;/b&gt;&lt;br&gt;in the popup\"\n}</pre>
      "),
      '#required' => TRUE,
    );
  }

  $form['ding_wagnerguide_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug mode'),
    '#default_value' => variable_get('ding_wagnerguide_debug', false),
    '#description' => t("
      If set to true, will print HTML comment after wagnerguide link (or where link should have been printed) with the content of 'holding' from Alma.<br><br>
      Beware that it is printed by javascript, so it cannot be seen in the page source. Use the likes of Firebug or \"View selection source\" et al.<br><br>
      Can be used to figure out what to put in the above fields.
    "),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 *
 * @param type $form
 * @param type $form_state
 */
function ding_wagnerguide_admin_validate($form, &$form_state) {
  $link_base = $form_state['values']['ding_wagnerguide_linkbase'];
  if (!is_array(json_decode($link_base, true))) {
    form_set_error('ding_wagnerguide_linkbase', t('Malformed JSON: Does not transform to array.'));
  } else {
    $branches = json_decode($link_base);
    foreach ($branches as $branch => $link) {
      $field = 'ding_wagnerguide_transformation_array_' . $branch;
      $transformation_array = $form_state['values'][$field];
      if (!is_array(json_decode($transformation_array, true))) {
        form_set_error($field, t('Malformed JSON: Does not transform to array.'));
      }
    }
  }
}

/**
 * Implements hook_menu
 * @return array
 */
function ding_wagnerguide_menu() {

  $items = array();

  $items['admin/settings/ding/wagnerguide'] = array(
    'title' => t('Wagnerguide module settings'),
    'description' => t(''),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_wagnerguide_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['ding/wagnerguide/item/%'] = array(
    'title' => 'Ding Wagnerguide links',
    'description' => 'Returns a list of links to Wagnerguide',
    'page callback' => 'ding_wagnerguide_get_wagner_links',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_trampoline
 * @return array
 */
function ding_wagnerguide_trampoline() {
  $items = array();
  $items['ding/wagnerguide/item/%'] = array();
  return $items;
}

/**
 * Called via ajax/javascript. Returns (prints) JSON containing an array of holdings
 * @param int $ting_item
 * @return null
 */
function ding_wagnerguide_get_wagner_links($ting_item) {
  $details = alma_client_invoke('catalogue_record_detail', $ting_item);

  $result = array();
  if ($details && isset($details['records'])) {
    foreach ($details['records'] as $alma_id => $record) {
      $result[$alma_id] = array();
      foreach ($record['holdings'] as $alma_holding) {
        $result[$alma_id][] = ding_wagnerguide_get_holding($alma_holding);
      }
    }
  }
  drupal_set_header('Content-Type: application/json; charset=utf-8');
  echo json_encode($result);
  return;
}

/**
 * Sub function of ding_wagnerguide_get_wagner_links.
 * Return one holding i.e. one wagnerguide link or popup data
 *
 * @param array $alma_holding
 * @return mixed null, array or string
 */
function ding_wagnerguide_get_holding($alma_holding) {
  // Alma parts => Wagner parts
  $alma_holding_parts = array(
    'department_id' => 'Department',
    'location_id' => 'Location',
    'sublocation_id' => 'Sublocation',
    'shelf_mark' => 'Shelf'
  );
  $trans = array(
    '~ae' => 'æ',
    '~oe' => 'ø',
    '~aa' => 'å',
  );

  $query_string_parts_base = array('Lang=da', 'menu=false');
  $link_base = json_decode(variable_get('ding_wagnerguide_linkbase', ''), true);

  $query_string_parts = array();
  $holding = array('href' => '');

  // first, do we know the branch?
  if (isset($alma_holding['branch_id']) && isset($link_base[$alma_holding['branch_id']])) {
    // get the tranformations for that branch
    $transformation_array = json_decode(variable_get('ding_wagnerguide_transformation_array_' . $alma_holding['branch_id'], ''), true);

    foreach ($alma_holding_parts as $alma_holding_part => $wagner_link_part) {
      if (!empty($alma_holding[$alma_holding_part])) {

        if ($alma_holding_part == 'shelf_mark') {
          // shelf_mark is a special case: Use only first letter
          if (preg_match("/[a-zA-ZæøåÆØÅ]/u", $alma_holding['shelf_mark'], $match)) {
            $query_string_parts[] = $wagner_link_part . '=' . strtoupper($match[0]);
          }
        } else {
          // all others are translated using the transformation array
          if (isset($transformation_array[$alma_holding_part][$alma_holding[$alma_holding_part]])) {
            // if an entry exists in the transformation array, transform
            $wagner_link_part_value = $transformation_array[$alma_holding_part][$alma_holding[$alma_holding_part]];
            if (!$wagner_link_part_value) {
              // if a value is set to false in $transformation_array, no link will be given.
              $query_string_parts = array();
              break;
            } elseif (strpos($wagner_link_part_value, 'popup,') === 0) {
              // if a value is set to "popup,XXX" in $transformation_array, a popup link will be given. XXX is the text in the popup.
              $query_string_parts = array();
              $holding['popup'] = substr($wagner_link_part_value, 6);
              break;
            }
          } else {
            // or just pass the value if no entry in the transformation array, but replace æøå.
            $wagner_link_part_value = strtr($alma_holding[$alma_holding_part], $trans);
          }
          $query_string_parts[] = $wagner_link_part . '=' . $wagner_link_part_value;
        }
      }
    }
  }

  if ($query_string_parts) {
    $query_string = join('&', array_merge($query_string_parts_base, $query_string_parts));
    $holding['href'] = $link_base[$alma_holding['branch_id']] . '?' . $query_string;
  }

  if (variable_get('ding_wagnerguide_debug', false)) {
    $holding['debug'] = print_r($alma_holding, true);
  }

  return $holding;
}

drupal_add_js(drupal_get_path('module', 'ding_wagnerguide') . '/ding_wagnerguide.js', 'module', 'footer', true);
