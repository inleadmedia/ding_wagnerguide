<?php

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the onthisdate module
 */
function ding_wagnerguide_perm() {
  return array('administer ding_wagnerguide');
}

/**
 *
 * @return array 
 */
function ding_wagnerguide_admin() {
  $link_base = '{
  "Vej":"http://web.wagnerguide.com/vejleLibrary.aspx",
  "Bor":"http://web.wagnerguide.com/BorkopLibrary.aspx",
  "Egt":"http://web.wagnerguide.com/EgtvedLibrary.aspx",
  "Giv":"http://web.wagnerguide.com/GiveLibrary.aspx",
  "Jel":"http://web.wagnerguide.com/JellingLibrary.aspx"
}';

  $transformation_array = '{
  "Department":{
  },
  "Location":{
    "bus":false,
    "dagpleje":false,
    "depot":false,
    "kontor":false,
    "magasin":false,
    "magasin1":false,
    "magasin2":false,
    "magasin3":false
  },
  "Sublocation":{
  }
}';

  $form = array();

  $form['ding_wagnerguide_linkbase'] = array(
    '#type' => 'textarea',
    '#title' => t('Base URL for branches'),
    '#default_value' => variable_get('ding_wagnerguide_linkbase', $link_base),
    '#rows' => 7,
    '#description' => t("."),
    '#required' => TRUE,
  );

  // make a transformation array text area pr. branch
  $branches = json_decode(variable_get('ding_wagnerguide_linkbase', ''), true);
  foreach ($branches as $branch => $link) {
    $field = 'ding_wagnerguide_transformation_array_' . $branch;
    $form[$field] = array(
      '#type' => 'textarea',
      '#title' => t('Translation array for branch "' . $branch . '"'),
      '#default_value' => variable_get($field, $transformation_array),
      '#rows' => 15,
      '#description' => t("."),
      '#required' => TRUE,
    );
  }
  $form['ding_wagnerguide_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug mode'),
    '#default_value' => variable_get('ding_wagnerguide_debug', false),
    '#description' => t("If set to tru, will print HTML comment after wagnerguide link with the content of 'holding' from Alma."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function ding_wagnerguide_admin_validate($form, &$form_state) {
  $link_base = $form_state['values']['ding_wagnerguide_linkbase'];
  if (!is_array(json_decode($link_base, true))) {
    form_set_error('ding_wagnerguide_linkbase', t('Malformed JSON: Does not transform to array.'));
  } else {
    $branches = json_decode($link_base);
    foreach ($branches as $branch => $link) {
      $field = 'ding_wagnerguide_transformation_array_' . $branch;
      $transformation_array = $form_state['values'][$field];
      if (!is_array(json_decode($transformation_array, true))) {
        form_set_error($field, t('Malformed JSON: Does not transform to array.'));
      }
    }
  }
}

function ding_wagnerguide_menu() {

  $items = array();

  $items['admin/settings/ding/wagnerguide'] = array(
    'title' => t('Wagnerguide module settings'),
    'description' => t(''),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_wagnerguide_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['ding/wagnerguide/item/%'] = array(
    'title' => 'Ding Wagnerguide links',
    'description' => 'Returns a list of links to Wagnerguide',
    'page callback' => 'ding_wagnerguide_get_wagner_link',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Impliments hook_trampoline
 * @return array 
 */
function ding_wagnerguide_trampoline() {
  $items = array();
  $items['ding/wagnerguide/item/%'] = array();
  return $items;
}

/**
 *
 * @param array $provider_ids
 * @return array 
 */
function ding_wagnerguide_get_wagner_link($provider_id) {
  $details = alma_client_invoke('catalogue_record_detail', $provider_id);

  // Alma parts => Wagner parts
  $alma_holding_parts = array(
    'department_id' => 'Department',
    'location_id' => 'Location',
    'sublocation_id' => 'Sublocation',
    'shelf_mark' => 'Shelf'
  );
  $query_string_parts_base = array('Lang=da', 'menu=false');
  $trans = array(
    '~ae' => 'æ',
    '~oe' => 'ø',
    '~aa' => 'å',
  );
  $link_base = json_decode(variable_get('ding_wagnerguide_linkbase', ''), true);

  $result = array();
  if ($details && isset($details['records'])) {
    foreach ($details['records'] as $alma_id => $record) {
      $result[$alma_id] = array();
      foreach ($record['holdings'] as $branch_holding) {
        $holding = array();
        $query_string_parts = array();

        if (isset($branch_holding['branch_id']) && isset($link_base[$branch_holding['branch_id']])) {
          $branch = $branch_holding['branch_id'];
          $transformation_array = json_decode(variable_get('ding_wagnerguide_transformation_array_' . $branch, ''), true);

          foreach ($alma_holding_parts as $alma_holding_part => $wagner_link_part) {
            if (!empty($branch_holding[$alma_holding_part])) {
              if ($wagner_link_part == 'Shelf') {
                // Use only first letter of Shelf mark
                if (preg_match("/[a-zA-ZæøåÆØÅ]/u", $branch_holding['shelf_mark'], $match)) {
                  $query_string_parts[] = 'Shelf=' . strtoupper($match[0]);
                }
              } else {
                if (isset($transformation_array[$wagner_link_part][$branch_holding[$alma_holding_part]])) {
                  // translate using the $transformation_array array
                  $wagner_link_part_value = $transformation_array[$wagner_link_part][$branch_holding[$alma_holding_part]];
                  if (!$wagner_link_part_value) {
                    // if a value is set to false in $transformation_array, no link will be given.
                    $query_string_parts = '';
                    break;
                  } elseif (strpos($wagner_link_part_value, 'popup,') === 0) {
                    // if a value is set to "popup,XXX" in $transformation_array, a popup link will be given. XXX is the text in the popup.
                    $holding['popup'] = substr($wagner_link_part_value, 6);
                    $query_string_parts = '';
                    break;
                  }
                } else {
                  // or just pass the value if no entry in $transformation_array, but replace æøå.
                  $wagner_link_part_value = strtr($branch_holding[$alma_holding_part], $trans);
                }
                $query_string_parts[] = $wagner_link_part . '=' . $wagner_link_part_value;
              }
            }
          }
        }

        if ($query_string_parts) {
          $query_string = join('&', array_merge($query_string_parts_base, $query_string_parts));
          $holding['href'] = $link_base[$branch] . '?' . $query_string;
        } else {
          $holding['href'] = '';
        }

        if (variable_get('ding_wagnerguide_debug', false)) {
          $holding['debug'] = print_r($branch_holding, true);
        }
        $result[$alma_id][] = $holding;
      }
    }
  }
  drupal_set_header('Content-Type: application/json; charset=utf-8');
  echo json_encode($result);
  return;
}

drupal_add_js(drupal_get_path('module', 'ding_wagnerguide') . '/ding_wagnerguide.js', 'module', 'footer', true);
